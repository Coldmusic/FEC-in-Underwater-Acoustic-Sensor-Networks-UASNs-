<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Language" content="en-us">
  <meta http-equiv="Content-Type"
 content="text/html; charset=windows-1252">
  <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <title>New Page 1</title>
</head>
<body>
<h1 style="text-align: center;">Acoustics Toolbox
</h1>
<big><big><br>
<small>Copyright (C) 2009&nbsp; Michael B. Porter<br>
<br>
&nbsp;&nbsp;&nbsp; This program is free software: you can redistribute
it and/or modify<br>
&nbsp;&nbsp;&nbsp; it under the terms of the GNU General Public License
as published by<br>
&nbsp;&nbsp;&nbsp; the Free Software Foundation, either version 3 of
the License, or<br>
&nbsp;&nbsp;&nbsp; (at your option) any later version.<br>
<br>
&nbsp;&nbsp;&nbsp; This program is distributed in the hope that it will
be useful,<br>
&nbsp;&nbsp;&nbsp; but WITHOUT ANY WARRANTY; without even the implied
warranty of<br>
&nbsp;&nbsp;&nbsp; MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.&nbsp; See the<br>
&nbsp;&nbsp;&nbsp; GNU General Public License for more details.<br>
<br>
&nbsp;&nbsp;&nbsp; You should have received a copy of the GNU General
Public License<br>
&nbsp;&nbsp;&nbsp; along with this program.&nbsp; If not, see
&lt;http://www.gnu.org/licenses/&gt;.</small><big><big><br>
<span style="font-weight: bold;"></span><br>
</big></big></big></big>
<h1>GUI Wrapper:</h1>
<p><a
 href="http://www.curtin.edu.au/curtin/centre/cmst/products/actoolbox/index.html">ACT</a>:
Matlab
front-end
for
the
Acoustic
Toolbox written by <a
 href="http://www.curtin.edu.au/curtin/centre/cmst/staff/duncan.html">Alec
Duncan</a> from the <a
 href="http://www.curtin.edu.au/curtin/centre/cmst/">Centre
for Marine Science and Technology</a> at <a
 href="http://www.curtin.edu.au">Curtin
University</a>.</p>
<h1>Which version should I download?</h1>
There is only one version of the source code; however, you may see
options for different pre-compiled binaries. If you're using another
machine or operating systems you'll need to
recompile it which requires a Fortran95 compiler. The free GFortran
compiler works well. We have also used the free g95 compiler in the
past; however, the current version of AT uses get_command_parameter,
which is a feature of Fortran 2003 not in g95 as of this writing.<br>
<br>
<ul style="line-height: 100%; margin-bottom: 9px;">
  <li>
    <p><b>atWinPII_f95</b>. Version for a Windows, Pentium II
machine.&nbsp;
The Makefiles are in a sort of Unix style. If you download cygwin
(publicly available on the web) you get a sort of pseudo-Unix window in
which you can just type 'make all' and 'make install' to recompile and
install.</p>
  </li>
  <li>
    <p style="margin-bottom: 18px;"><b>atLinuxPII_f95</b>.
Same as above but with binaries compiled under Linux.</p>
  </li>
  <li><span style="font-weight: bold;">atOSXintel</span>. For the Mac.
Compiled with gfortran. <br>
  </li>
</ul>
<br>
To use the binaries, you will like need gfortran installed (which is
very easy) since the binaries use dynamic libraries that need to be
pre-installed.<br>
<h1>Overview</h1>
<p class="MsoNormal"><span style="font-family: &quot;Times New Roman&quot;;"><o:p></o:p></span>The
Acoustic
<span class="SpellE">ToolBox</span> includes four
acoustic models:</p>
<p style="margin-left: 40px;" class="MsoNormal">BELLHOP: A beam/ray
trace code</p>
<p style="margin-left: 40px;" class="MsoNormal">KRAKEN:<span style="">&nbsp;
</span>A
normal mode code</p>
<p style="margin-left: 40px;" class="MsoNormal"><o:p></o:p>SCOOTER: A
finite element FFP code</p>
<p style="margin-left: 40px;" class="MsoNormal"><o:p></o:p>SPARC:<span
 style="">&nbsp;&nbsp; </span>A
time domain FFP code<br>
</p>
<p style="margin-left: 40px;" class="MsoNormal"><br>
</p>
<p class="MsoNormal"><o:p></o:p>In addition, AT contains BOUNCEm which
omputes the reflection coefficient for a layered medium and may be used
to provide input to BELLHOP. A common input structure has been used
throughout so that
only minor modifications are needed to switch from one program to
another.</p>
<p class="MsoNormal"><span style="font-family: &quot;Times New Roman&quot;;"><o:p></o:p></span>All
the
models
produce
`shade'
files
that can be processed
using a common set of plotting routines to plot transmission loss vs.
range or
vs. range and depth. </p>
<p class="MsoNormal" style="margin-left: 0.25in;"><span
 style="font-family: &quot;Times New Roman&quot;;"><o:p>&nbsp;</o:p></span></p>
<h1>Porting the code</h1>
<p class="MsoNormal"><span style="font-family: &quot;Times New Roman&quot;;"><o:p>Depending
on
your
platform, you may be able to execute the pre-compiled binaries.
Currently we use GFORTRAN to compile those. However, our version
requires access to gcc dynamic libraries. Therefore, you will need to
have a compatible version of gcc and gfortran installed on your system
to run the pre-compiled binaries.<br>
</o:p></span></p>
<p class="MsoNormal"><span style="font-family: &quot;Times New Roman&quot;;"><o:p>The
package
adheres
strictly to the Fortran 2003 standard. A few of the
Fortran 2003 extensions from Fortran 90 are used.<br>
</o:p></span></p>
<h2>Record length</h2>
<p class="MsoNormal">Fortran compilers differ in whether record lengths
should be
declared as bytes or words. To ensure the programs run, I declare
lengths in
bytes. If your compiler uses words as the default, look for a compiler
switch
to override that so that your files are not unnecessarily large.</p>
<p class="MsoNormal">Some of the programs in this package use direct
access I/O
and need to know a record length. Many systems do not maintain this
information
as part of the file info so the code writes that information directly
into the
file. Then the file is opened twice. First it is opened with a dummy
record
length to read the actual record length from the file. Then it is
re-opened
with the correct record length. On machines that <i style="">do</i>
know the correct record length, that first open may generate an
error message and will have to be removed. The RECL <span
 class="SpellE">specifier</span>
should then also be removed from the second open.<br>
<o:p>&nbsp;</o:p></p>
<h2>Ice Scatter module</h2>
<p class="MsoNormal">The <span class="SpellE">Twersky</span>-scatter
option is
problematic because it calls <span class="SpellE">mathieu.f</span> and
<span class="SpellE"><span class="GramE">slbessel.f</span></span><span
 class="GramE"> which</span>
don't adhere to a rigorous Fortran standard. To avoid this problem, the
current
distribution has this option disabled.</p>
<p class="MsoNormal">If you want to put it back in, you will need to
link to <span class="SpellE">twersk.f</span> instead of <span
 class="SpellE">twerskfuse.f</span>.
These routines call <span class="SpellE"><span class="GramE">mathieu.f</span></span><span
 class="GramE"> which</span> needs to be compiled with a switch to
initialize all
variables to zero. Most compilers have some such switch. </p>
<h2>Plotting:</h2>
<p class="MsoNormal">Plot packages come and go. However, the output
formats of
the various models are all fairly simple to work with. The distribution
includes <span class="SpellE">Matlab</span> <span class="GramE">scripts
which</span>
I currently use for plotting. If you don’t have <span class="SpellE">Matlab</span>,
then
these
will
at
least
provide an example of how to read the file
formats.<br>
<br>
</p>
<h1>Installation Notes</h1>
<p class="MsoNormal">To run the Acoustics Toolbox, the executables need
to be in your path. The process for
setting your path depends on your operating system. I can't stay
current with the options but here are some things that have worked in
the past:<br>
</p>
<p style="margin-left: 40px;" class="MsoNormal">DOS: add the following
to your
autoexec.bat to
make the scripts executables in your default path:</p>
<p style="margin-left: 80px;" class="MsoNormal">SET PATH=%PATH%<span
 class="GramE">;C</span>:\AT\SCRIPTS;C:\AT\BIN<br>
</p>
<p style="margin-left: 40px;" class="MsoNormal">Windows 2000 (and
perhaps NT): right
click on
the “My Computer” icon and select “Properties”, “advanced”.</p>
<p style="margin-left: 40px;" class="MsoNormal">Windows XP: go to
control
panel/Performance and Maintenance/System/Advanced and look for the
pushbutton <span class="SpellE">labled</span> “Environment Variables”.
There you can edit the
system variable “Path”.<br>
</p>
<p class="MsoNormal"><o:p></o:p><o:p></o:p>Obviously these lines should
be updated
to reflect whichever
directory you installed things in. You may need to reboot to make sure
this takes
effect. Note that the DOS and Unix scripts are not maintained. We
currently execute the binaries via Matlab.<br>
</p>
<p class="MsoNormal">If you’re having problems, verify your path
includes these
by
typing “path” from a DOS window. Typically you run KRAKEN by typing
something like
“kraken <span class="SpellE">pekeris</span>”. at the DOS command line,
or kraken( 'pekeris') at the Matlab command line. </p>
<span style="font-family: &quot;Times New Roman&quot;;">On
Unix/Linux/MacOSX systems you can ensure that path info is set in
Matlab at start up by editing .../bin/matlab to add something like:</span>
<p class="MsoNormal"><span style="font-family: &quot;Times New Roman&quot;;">&nbsp;&nbsp;&nbsp;
source
~/.profile<br>
</span></p>
<p class="MsoNormal">where .profile is the shell start up script that
initializes your path.<br>
</p>
<p class="MsoNormal">Finally, if you use Matlab then you just need to
use the "Set Path" option under the "File" menu. If you include all of
the Acoustics Toolbox in your Matlab path, then the Matlab scripts find
the location of the binaries using the Matlab "which" command.<br>
</p>
<p class="MsoNormal">Once you have the basic code working,
you might want to run
some of the test batteries in at/tests to completely verify your
installation. The m-file, run<span class="SpellE">tests.m</span> runs
the complete suite of tests<span style="font-family: &quot;Times New Roman&quot;;">
using the Fortran binaries. The m-file runtestsM.m does the same thing,
using the Matlab versions of BELLHOP, SCOOTER, BOUNCE, and SPARC.<br>
</span></p>
<span style="font-family: &quot;Times New Roman&quot;;"></span>
<p class="MsoNormal"><br>
<span style="font-family: &quot;Times New Roman&quot;;"><o:p></o:p></span></p>
<h1>Updates</h1>
<p class="MsoNormal">(Check also the individual subdirectories for
updates on
individual components of the Acoustics Toolbox.)</p>
<p class="MsoNormal"><span style="font-family: &quot;Times New Roman&quot;;"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal"><i style="">December 1997<o:p></o:p></i></p>
<p class="MsoNormal">Minor changes have been made to the package for
improved f77
to f90 portability. Fortran 90 seems to treat parameters differently in
terms
of precision so some of those changes are important for the most
accurate
results.</p>
<p class="MsoNormal"><i style="">July 1999<o:p></o:p></i></p>
<p class="MsoNormal">The whole package has been converted to f90/95
standard with
free-format lines and taking advantage of dynamic allocation. The code
is more
concise and portable. Dynamic allocation means that you will not have
to worry
about dimensional limits--- the size of the problem you can solve is
limited
only by RAM on your system.</p>
<p class="MsoNormal">The change to dynamic allocation has forced a
small change
in the input structure. Previously an input format was often used with
a number
of items in a vector followed by the actual vector. For instance, the
vector of
receiver depths is read this way.</p>
<p class="MsoNormal">In the new version the number of items in the
vector must appear
on a separate line so that the code can read it, allocate the space,
and then
read the vector contents.<br>
</p>
<p class="MsoNormal"><span style="font-style: italic;">May 2009</span><br>
</p>
<p class="MsoNormal">The Matlab version of BELLHOP has been replaced by
a new version that traces one beam at a time. The ealier version traced
all the beams in parallel for efficiency; however, the logic is too
complicated to maintain.<br>
</p>
<p class="MsoNormal">December 2009<br>
</p>
<p class="MsoNormal">Converted most "char foo*5' references, which are
deprecated in the new Fortran, in favor of "char (len=5) :: foo".<br>
</p>
<p class="MsoNormal">January 2010<br>
</p>
<p class="MsoNormal">Updated the volume attenuation from the 1967 Thorp
formula to the more recent one in JKPS. Converted all the Fortran
models so that they would determine the file names from the command
line arguments. This eliminates the need for DOS, Unix, or Matlab
scripts to move files around.<br>
</p>
<p class="MsoNormal">July 2010<br>
</p>
<p class="MsoNormal">Made all type conversions, e.g. complex to real or
double to single, explicit. Expanded use of EXPLICIT NONE to ensure all
variable types are called out. Further expansion of the lengths of
variable names to take advantage of Fortran 2003. Expanded use of
strucutre-variables. Additional changes as
described in the read.me files for the various models. This is a fairly
significant revision in terms of the evoloution from Fortran 77 to
Fortran 2003. However, there are virtually no changes to the input and
output files.<br>
</p>
<h1>Frequently Asked Questions</h1>
<p class="MsoNormal"><i style="">Why do I get an
end-of-file in reading the very last line of the <span class="SpellE">envfil</span>?<o:p></o:p></i></p>
<p class="MsoNormal">You left off a carriage return/line
feed after
the last line, or other appropriate end-of-line marker for your system.</p>
<p class="MsoNormal"><i style="">Why do I get a segmentation violation<span
 class="SpellE"></span>?<o:p></o:p></i></p>
<p class="MsoNormal">You ran a case that required an outrageous amount
of storage. The code is supposed to catch all such cases by detecting
an error in the allocation of dynamic variables (or limits for the few
arrays with fixed dimensions). However, we see cases where the compiler
simply does not handle huge arrays properly.<br>
</p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p>&nbsp;</p>
</body>
</html>
